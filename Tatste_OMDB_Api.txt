import requests_with_caching
import json

def get_movies_from_tastedive(tags_string):
    baseurl = "https://tastedive.com/api/similar"
    params_diction = {'q':tags_string,'type':'movies','limit':5}
    resp = requests_with_caching.get(baseurl, params = params_diction)
    return json.loads(resp.text)

def extract_movie_titles(dic):
    lst = []
    newdic = dic['Similar']['Results']
    for ele in newdic :
        lst.append(ele['Name'])
    return lst
def get_related_titles(mv_lst):
    ans_lst = []
    for mov in mv_lst :
        x = extract_movie_titles(get_movies_from_tastedive(mov))
        for i in x :
            if i not in ans_lst :
                ans_lst.append(i)
    return ans_lst
def get_movie_data(stri):
    base_url = "http://www.omdbapi.com/"
    param = {'t':stri,'r':'json'}
    respon = requests_with_caching.get(base_url, params = param)
    #print(respon.url)
    return json.loads(respon.text)
def get_movie_rating(dicti):
    ans = 0
    n_lst = dicti['Ratings']
    for el in n_lst :
        if el['Source'] == 'Rotten Tomatoes' :
            ans = el['Value']
            break
    return int(str(ans).replace('%',''))

def get_sorted_recommendations(mv_tit_lst):
    srt_lst = []
    tit_lst = get_related_titles(mv_tit_lst)
    sam_lst = []
    #sam_dic = {}
    for mov in tit_lst :
        sam_lst.append( ( get_movie_rating(get_movie_data(mov)),mov ) )
        #sam_dic[mov] = get_movie_rating(get_movie_data(mov))
    srt_lst = sorted(sam_lst,reverse = True)
    a_lst = []
    for t in srt_lst :
        a_lst.append(t[1])
    return a_lst
        
# some invocations that we use in the automated tests; uncomment these if you are getting errors and want better error messages
# get_sorted_recommendations(["Bridesmaids", "Sherlock Holmes"])

#get_sorted_recommendations. It takes a list of movie titles as an input. 
#It returns a sorted list of related movie titles as output, up to five related movies for each input movie title. 
#The movies should be sorted in descending order by their Rotten Tomatoes rating, as returned by the get_movie_rating function. 
#Breaks ties in reverse alphabetic order, so that ‘Yahsi Bati’ comes before ‘Eyyvah Eyvah’.